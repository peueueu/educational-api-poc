{
  "title": "Fundamentos",
  "slug": "fundamentos",
  "cardDescription": "Seus principais benefícios incluem detecção de erros em tempo de desenvolvimento e autocompletar de código mais inteligente melhorando a produtividade das pessoas desenvolvedoras.",
  "theme": "typescript-fundamentals",
  "sequence": 1,
  "duration": "90 minutos",
  "difficulty": "beginner",
  "prerequisites": [
    "javascript-basico"
  ],
  "learning_objectives": "",
  "id": "3242e7bc-5f32-41f0-9238-b34e8e224423",
  "content": "# Fundamentos do TypeScript\n\nTypeScript é uma linguagem de programação desenvolvida pela Microsoft que estende o JavaScript, adicionando recursos avançados de tipagem e programação orientada a objetos (POO). É projetado para ajudar as pessoas desenvolvedoras a escrever código mais robusto e menos propenso a erros.\n\n## O que é TypeScript?\n\nTypeScript funciona como um **superconjunto do JavaScript**. Isso significa que qualquer código JavaScript válido também é válido em TypeScript, mas TypeScript oferece funcionalidades adicionais para aprimorar o desenvolvimento.\n\n### Tipagem Estática\n\nUm dos principais recursos do TypeScript é a **tipagem estática**. Ao contrário do JavaScript, que é uma linguagem dinamicamente tipada (onde os tipos de dados das variáveis são determinados em tempo de execução), o TypeScript permite que as desenvolvedoras especifiquem os tipos de variáveis, parâmetros de funções e valores de retorno.\n\n```typescript\n// JavaScript (tipagem dinâmica)\nlet nome = \"João\";\nnome = 42; // Isso é válido em JavaScript\n\n// TypeScript (tipagem estática)\nlet nome: string = \"João\";\nnome = 42; // Erro! Tipo 'number' não pode ser atribuído ao tipo 'string'\n```\n\n### Detecção de Erros em Tempo de Compilação\n\nO TypeScript verifica o código durante a compilação, identificando erros antes mesmo do código ser executado. Isso resulta em:\n\n- **Menos bugs em produção**\n- **Desenvolvimento mais confiável**\n- **Refatoração mais segura**\n\n## Configuração do Ambiente\n\nPara começar a usar TypeScript, você precisa instalá-lo em seu sistema:\n\n```bash\n# Instalação global\nnpm install -g typescript\n\n# Verificar a instalação\ntsc --version\n```\n\n### Criando seu Primeiro Projeto\n\n1. **Crie um diretório para o projeto:**\n```bash\nmkdir meu-projeto-typescript\ncd meu-projeto-typescript\n```\n\n2. **Inicialize o projeto:**\n```bash\nnpm init -y\nnpm install typescript --save-dev\n```\n\n3. **Crie o arquivo de configuração:**\n```bash\nnpx tsc --init\n```\n\n4. **Crie seu primeiro arquivo TypeScript:**\n```typescript\n// app.ts\nfunction saudar(nome: string): string {\n    return `Olá, ${nome}!`;\n}\n\nconst mensagem = saudar(\"Mundo\");\nconsole.log(mensagem);\n```\n\n5. **Compile e execute:**\n```bash\nnpx tsc app.ts\nnode app.js\n```\n\n## Tipos Básicos\n\nTypeScript oferece vários tipos básicos que você pode usar:\n\n### Tipos Primitivos\n\n```typescript\n// String\nlet nome: string = \"João\";\n\n// Number\nlet idade: number = 30;\nlet preco: number = 19.99;\n\n// Boolean\nlet ativo: boolean = true;\n\n// Array\nlet numeros: number[] = [1, 2, 3, 4, 5];\nlet nomes: string[] = [\"Ana\", \"Bruno\", \"Carlos\"];\n\n// Tuple\nlet pessoa: [string, number] = [\"João\", 30];\n```\n\n### Tipos Especiais\n\n```typescript\n// Any (evite usar quando possível)\nlet qualquerCoisa: any = \"texto\";\nqualquerCoisa = 42;\nqualquerCoisa = true;\n\n// Void (para funções que não retornam valor)\nfunction log(mensagem: string): void {\n    console.log(mensagem);\n}\n\n// Null e Undefined\nlet valorNulo: null = null;\nlet valorIndefinido: undefined = undefined;\n```\n\n## Vantagens do TypeScript\n\n### 1. Melhor Experiência de Desenvolvimento\n\n- **Autocompletar inteligente**\n- **Navegação de código**\n- **Refatoração segura**\n- **Documentação inline**\n\n### 2. Detecção Precoce de Erros\n\n```typescript\ninterface Usuario {\n    nome: string;\n    email: string;\n    idade: number;\n}\n\nfunction criarUsuario(dados: Usuario): Usuario {\n    // TypeScript verifica se todos os campos obrigatórios estão presentes\n    return dados;\n}\n\n// Erro detectado em tempo de compilação\nconst usuario = criarUsuario({\n    nome: \"João\",\n    // email: \"joao@email.com\", // Campo obrigatório ausente!\n    idade: 30\n});\n```\n\n### 3. Escalabilidade\n\nTypeScript é especialmente valioso em projetos grandes, onde:\n\n- **Múltiplas pessoas desenvolvem**\n- **Código é mantido por longos períodos**\n- **Refatorações são frequentes**\n- **Integração entre módulos é complexa**\n\n## Próximos Passos\n\nAgora que você entende os fundamentos do TypeScript, está pronto para:\n\n1. **Explorar tipos avançados** (interfaces, unions, generics)\n2. **Aprender sobre classes e herança**\n3. **Integrar com frameworks** (React, Angular, Vue)\n4. **Configurar ferramentas de build** (Webpack, Vite)\n\nO TypeScript é uma ferramenta poderosa que pode transformar significativamente sua experiência de desenvolvimento JavaScript, proporcionando maior confiança e produtividade em seus projetos.\n",
  "themeFolder": "01-typescript-fundamentals",
  "topicFolder": "01-fundamentos",
  "type": "topic"
}