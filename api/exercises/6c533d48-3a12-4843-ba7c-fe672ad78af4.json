{
  "title": "Criando Tipos B√°sicos",
  "slug": "tipos-basicos",
  "cardDescription": "Exerc√≠cio pr√°tico para criar e utilizar tipos b√°sicos em TypeScript.",
  "theme": "typescript-fundamentals",
  "topic": "fundamentos",
  "difficulty": "beginner",
  "estimated_time": "15 minutos",
  "points": 10,
  "tags": "[\"tipos\", \"vari√°veis\", \"b√°sico\"]",
  "id": "6c533d48-3a12-4843-ba7c-fe672ad78af4",
  "instructions": "# Exerc√≠cio: Criando Tipos B√°sicos\n\n## üéØ Objetivo\n\nPraticar a declara√ß√£o e uso de tipos b√°sicos em TypeScript, incluindo strings, numbers, booleans e arrays.\n\n## üìã Instru√ß√µes\n\nCrie um arquivo `tipos-basicos.ts` e implemente as seguintes vari√°veis com os tipos CORRETOS:\n\n### Parte 1: Tipos Primitivos\n\n1. **Declare uma vari√°vel `nomeCompleto`** do tipo `string` com seu nome completo\n2. **Declare uma vari√°vel `idade`** do tipo `number` com sua idade\n3. **Declare uma vari√°vel `estudante`** do tipo `boolean` indicando se voc√™ √© estudante\n4. **Declare uma vari√°vel `salario`** do tipo `number` com um valor decimal\n\n### Parte 2: Arrays\n\n5. **Declare um array `hobbies`** do tipo `string[]` com pelo menos 3 hobbies\n6. **Declare um array `notas`** do tipo `number[]` com 5 notas de 0 a 10\n7. **Declare um array `presencas`** do tipo `boolean[]` com 7 valores (representando uma semana)\n\n### Parte 3: Tuple\n\n8. **Declare uma tuple `coordenadas`** do tipo `[number, number]` representando latitude e longitude\n9. **Declare uma tuple `pessoa`** do tipo `[string, number, boolean]` com nome, idade e se √© ativo\n\n### Parte 4: Fun√ß√£o\n\n10. **Crie uma fun√ß√£o `apresentar`** que:\n    - Receba par√¢metros: `nome: string`, `idade: number`, `estudante: boolean`\n    - Retorne uma `string` com uma apresenta√ß√£o da pessoa\n    - Exemplo: \"Ol√°, eu sou Jo√£o, tenho 25 anos e sou estudante.\"\n\n## ‚úÖ Crit√©rios de Avalia√ß√£o\n\n- [ ] Todas as vari√°veis est√£o declaradas com tipos corretos\n- [ ] Arrays cont√™m os tipos especificados\n- [ ] Tuples seguem a ordem correta dos tipos\n- [ ] Fun√ß√£o tem par√¢metros e retorno tipados\n- [ ] C√≥digo compila sem erros\n- [ ] Valores fazem sentido contextualmente\n\n## üöÄ Desafio Extra\n\nCrie uma fun√ß√£o `calcularMedia` que:\n- Receba um array de n√∫meros (notas)\n- Retorne a m√©dia das notas\n- Use tipos expl√≠citos para par√¢metros e retorno\n\n## üí° Dicas\n\n- Use `tsc tipos-basicos.ts` para compilar e verificar erros\n- O TypeScript pode inferir tipos, mas √© boa pr√°tica declar√°-los explicitamente\n- Arrays podem ser declarados como `tipo[]` ou `Array<tipo>`\n- Tuples t√™m tamanho fixo e tipos espec√≠ficos para cada posi√ß√£o\n",
  "solution": "# Solu√ß√£o: Criando Tipos B√°sicos\n\n## üí° Solu√ß√£o Completa\n\n```typescript\n// tipos-basicos.ts\n\n// Parte 1: Tipos Primitivos\nconst nomeCompleto: string = \"Maria Silva Santos\";\nconst idade: number = 28;\nconst estudante: boolean = true;\nconst salario: number = 3500.50;\n\n// Parte 2: Arrays\nconst hobbies: string[] = [\"leitura\", \"nata√ß√£o\", \"culin√°ria\", \"fotografia\"];\nconst notas: number[] = [8.5, 9.0, 7.5, 8.8, 9.2];\nconst presencas: boolean[] = [true, true, false, true, true, true, false];\n\n// Parte 3: Tuple\nconst coordenadas: [number, number] = [-23.5505, -46.6333]; // S√£o Paulo\nconst pessoa: [string, number, boolean] = [\"Ana Costa\", 32, true];\n\n// Parte 4: Fun√ß√£o\nfunction apresentar(nome: string, idade: number, estudante: boolean): string {\n    const statusEstudante = estudante ? \"sou estudante\" : \"n√£o sou estudante\";\n    return `Ol√°, eu sou ${nome}, tenho ${idade} anos e ${statusEstudante}.`;\n}\n\n// Desafio Extra\nfunction calcularMedia(notas: number[]): number {\n    const soma = notas.reduce((acc, nota) => acc + nota, 0);\n    return soma / notas.length;\n}\n\n// Testando as implementa√ß√µes\nconsole.log(\"=== Informa√ß√µes Pessoais ===\");\nconsole.log(`Nome: ${nomeCompleto}`);\nconsole.log(`Idade: ${idade} anos`);\nconsole.log(`Estudante: ${estudante ? \"Sim\" : \"N√£o\"}`);\nconsole.log(`Sal√°rio: R$ ${salario.toFixed(2)}`);\n\nconsole.log(\"\\n=== Arrays ===\");\nconsole.log(`Hobbies: ${hobbies.join(\", \")}`);\nconsole.log(`Notas: ${notas.join(\", \")}`);\nconsole.log(`Presen√ßas da semana: ${presencas.map(p => p ? \"‚úì\" : \"‚úó\").join(\" \")}`);\n\nconsole.log(\"\\n=== Tuples ===\");\nconsole.log(`Coordenadas: Lat ${coordenadas[0]}, Lng ${coordenadas[1]}`);\nconsole.log(`Pessoa: ${pessoa[0]}, ${pessoa[1]} anos, ${pessoa[2] ? \"ativo\" : \"inativo\"}`);\n\nconsole.log(\"\\n=== Fun√ß√µes ===\");\nconsole.log(apresentar(nomeCompleto, idade, estudante));\nconsole.log(`M√©dia das notas: ${calcularMedia(notas).toFixed(2)}`);\n```\n\n## üìù Explica√ß√£o da Solu√ß√£o\n\n### Tipos Primitivos\n- **string**: Usado para texto (`nomeCompleto`)\n- **number**: Usado para n√∫meros inteiros e decimais (`idade`, `salario`)\n- **boolean**: Usado para valores verdadeiro/falso (`estudante`)\n\n### Arrays\n- **string[]**: Array de strings para os hobbies\n- **number[]**: Array de n√∫meros para as notas\n- **boolean[]**: Array de booleans para presen√ßas\n\n### Tuples\n- **[number, number]**: Tuple com dois n√∫meros para coordenadas\n- **[string, number, boolean]**: Tuple mista para dados de pessoa\n\n### Fun√ß√£o com Tipos\n```typescript\nfunction apresentar(nome: string, idade: number, estudante: boolean): string\n```\n- Par√¢metros tipados explicitamente\n- Tipo de retorno especificado (`: string`)\n- Implementa√ß√£o que usa template literals\n\n### Fun√ß√£o de C√°lculo\n```typescript\nfunction calcularMedia(notas: number[]): number\n```\n- Recebe array de n√∫meros\n- Retorna n√∫mero (m√©dia)\n- Usa `reduce` para somar e divide pelo comprimento\n\n## üéØ Pontos Importantes\n\n1. **Tipagem Expl√≠cita**: Mesmo quando o TypeScript pode inferir, declaramos tipos explicitamente\n2. **Consist√™ncia**: Todos os valores respeitam os tipos declarados\n3. **Funcionalidade**: O c√≥digo n√£o apenas compila, mas tamb√©m executa corretamente\n4. **Boas Pr√°ticas**: Uso de `const` para valores que n√£o mudam\n\n## üöÄ Compila√ß√£o e Execu√ß√£o\n\n```bash\n# Compilar\ntsc tipos-basicos.ts\n\n# Executar\nnode tipos-basicos.js\n```\n\n## ‚úÖ Verifica√ß√£o\n\nO c√≥digo deve compilar sem erros e produzir uma sa√≠da organizada mostrando todos os valores e c√°lculos implementados.\n",
  "themeFolder": "01-typescript-fundamentals",
  "topicFolder": "01-fundamentos",
  "exerciseFolder": "001-tipos-basicos",
  "type": "exercise"
}